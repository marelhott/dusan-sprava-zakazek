import supabase from './supabaseClient';

// Mo≈æn√© n√°zvy bucket≈Ø (zkus√≠me je postupnƒõ)
const POSSIBLE_BUCKETS = ['files', 'uploads', 'documents', 'zakazky-files', 'public'];

let ACTIVE_BUCKET = null;

/**
 * Najde funkƒçn√≠ bucket nebo vytvo≈ô√≠ nov√Ω
 */
const findOrCreateBucket = async () => {
  try {
    // Zkontroluj existuj√≠c√≠ buckets
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ buckets:', bucketsError);
      return null;
    }
    
    console.log('üìÅ Dostupn√© buckets:', buckets.map(b => b.name));
    
    // Zkus pou≈æ√≠t prvn√≠ dostupn√Ω bucket
    if (buckets.length > 0) {
      ACTIVE_BUCKET = buckets[0].name;
      console.log('‚úÖ Pou≈æ√≠v√°m existuj√≠c√≠ bucket:', ACTIVE_BUCKET);
      return ACTIVE_BUCKET;
    }
    
    // Pokud ≈æ√°dn√Ω bucket neexistuje, zkus vytvo≈ôit s jednoduch√Ωm n√°zvem
    for (const bucketName of POSSIBLE_BUCKETS) {
      try {
        const { data, error } = await supabase.storage.createBucket(bucketName, {
          public: true
        });
        
        if (!error) {
          ACTIVE_BUCKET = bucketName;
          console.log('‚úÖ Bucket vytvo≈ôen:', bucketName);
          return ACTIVE_BUCKET;
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è Nelze vytvo≈ôit bucket ${bucketName}:`, e.message);
      }
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi hled√°n√≠ bucket:', error);
    return null;
  }
};

/**
 * Upload souboru do Supabase Storage
 * @param {File} file - File objekt z input
 * @param {string} zakazkaId - ID zak√°zky pro organizaci soubor≈Ø
 * @returns {Promise<{success: boolean, fileObject?: object, error?: string}>}
 */
export const uploadFileToSupabase = async (file, zakazkaId) => {
  try {
    // Nejd≈ô√≠ve najdi/vytvo≈ô bucket
    const activeBucket = await findOrCreateBucket();
    if (!activeBucket) {
      return {
        success: false,
        error: 'Supabase Storage nen√≠ dostupn√Ω. Kontaktujte administr√°tora.'
      };
    }
    
    // Generov√°n√≠ unik√°tn√≠ho n√°zvu souboru
    const fileExtension = file.name.split('.').pop();
    const timestamp = Date.now();
    const uniqueFileName = `${zakazkaId}/${timestamp}_${file.name}`;
    
    console.log('üìÅ Nahr√°v√°m soubor:', {
      originalName: file.name,
      uniqueName: uniqueFileName,
      size: file.size,
      type: file.type,
      bucket: activeBucket
    });
    
    // Upload do Supabase Storage
    const { data, error } = await supabase.storage
      .from(activeBucket)
      .upload(uniqueFileName, file);
    
    if (error) {
      console.error('‚ùå Chyba p≈ôi uploadu souboru:', error);
      return {
        success: false,
        error: `Chyba p≈ôi nahr√°v√°n√≠: ${error.message}`
      };
    }
    
    // Z√≠sk√°n√≠ ve≈ôejn√© URL
    const { data: urlData } = supabase.storage
      .from(activeBucket)
      .getPublicUrl(uniqueFileName);
    
    // Vytvo≈ôen√≠ file objektu s metadaty
    const fileObject = {
      id: timestamp.toString(),
      name: file.name,
      url: urlData.publicUrl,
      uploadedAt: new Date().toISOString(),
      size: file.size,
      type: file.type,
      storagePath: uniqueFileName,
      bucket: activeBucket
    };
    
    console.log('‚úÖ Soubor √∫spƒõ≈°nƒõ nahr√°n:', fileObject);
    
    return {
      success: true,
      fileObject
    };
    
  } catch (error) {
    console.error('‚ùå Neoƒçek√°van√° chyba p≈ôi uploadu:', error);
    return {
      success: false,
      error: `Neoƒçek√°van√° chyba: ${error.message}`
    };
  }
};